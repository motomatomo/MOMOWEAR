@using momoWear.Models
@model momoWear.Models.tclothes
@{
    ViewBag.Title = ViewBag.userName + "你好";
}

@using (Html.BeginForm("Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @ViewBag.err

    <div class="form-horizontal">
        <h4>新增商品</h4>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

        @*@Html.HiddenFor(model => model.fid)*@
        <div class="form-group" hidden>
            @Html.LabelFor(model => model.fid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fserialNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fserialNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fserialNumber, "", new { @class = "text-danger" })
            </div>
        </div>



        @{
            @*  下拉選單的文本Text: item.fid + item.fcategoryID+ item.fcategoryName中文名
                當作動態List的下拉選單Value: 選出fid
            *@

            //下拉選單選項
            List<SelectListItem> list = new List<SelectListItem>();
            //為了接TempData["fcategoryNameResult"]創的陣列
            List<tcategory> listTcategory = new List<tcategory>();

            foreach (var item in (TempData["fcategoryNameResult"] as List<tcategory>))
            {
                listTcategory.Add(item);

            }

            //foreach (var item in ViewBag.fcategoryNameResult)
            //{
            //    list.Add(new SelectListItem()
            //    {
            //        Text = "類別代號" + item.fid + " " + item.fcategoryID + " " + item.fcategoryName,
            //        Value = Convert.ToString(item.fid),
            //        Selected = false
            //    }
            //    ); ;
            //}

            foreach (var item in listTcategory)
            {
                list.Add(new SelectListItem()
                {
                    Text = "類別代號" + item.fid + " " + item.fcategoryID + " " + item.fcategoryName,
                    Value = Convert.ToString(item.fid),
                    Selected = false
                }
                ); ;
            }


        }
        @*下拉*@
        <div class="form-group">
            @Html.LabelFor(model => model.fcategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.fcategoryID, new { htmlAttributes = new { @class = "form-control" } })*@
                @*讓fcategoryID他的最大數字在跟資料庫的fid數量一樣*@
                @Html.EditorFor(model => model.fcategoryID, new { htmlAttributes = new { @class = "form-control", min = "1", max = list.Count, @readonly = "readonly" } })

                @Html.DropDownList("fcategoryName", list, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.fcategoryID, "", new { @class = "text-danger" })
                @Html.ActionLink("新增類別", "CreateGategory")

            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.fname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fcolor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fcolor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fcolor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fsize, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fsize, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fsize, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fquentity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fquentity, new { htmlAttributes = new { @class = "form-control", min = "0", max = "100" } })
                @Html.ValidationMessageFor(model => model.fquentity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fdescribe, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fdescribe, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fdescribe, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fsalesVolume, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fsalesVolume, new { htmlAttributes = new { @class = "form-control", min = "0", max = "100" } })
                @Html.ValidationMessageFor(model => model.fsalesVolume, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fprice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fprice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fprice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fsalesdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fsalesdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fsalesdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fsafetyStockLevel, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fsafetyStockLevel, new { htmlAttributes = new { @class = "form-control", min = "0", max = "100" } })
                @Html.ValidationMessageFor(model => model.fsafetyStockLevel, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fmodifiedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fmodifiedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fmodifiedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.fbrand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.fbrand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.fbrand, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.fphotoPath, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.fphotoPath, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.fphotoPath, "", new { @class = "text-danger" })
                </div>

            </div>*@



        <fieldset class=" float-lg-end col-md-6  ">
            <legend class="family">照片上傳</legend>

            <div class="col-md-6">
                <label for="inputFile" class="form-label">選擇產品照片</label>
                <input type="file" class="form-control btn-outline-secondary" name="photo" id="fileid" accept="image/*">
                <img src="" class="w-75 m-3 " id="img1" />
            </div>
        </fieldset>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "List")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        //把下拉選單idfcategoryName的value選出來
        //放在fcategoryID input裡 disabled 不能自行輸入
        //因為有人拉了下拉選單又跑去put手動輸入 結果送出的資料是以手動輸入的為準
        //造成下拉選單 跟手動輸入的類別代號在畫面上看起來不同

        let fcategoryName = document.getElementById("fcategoryName");
        let fcategoryID = document.getElementById("fcategoryID");
        //var selectValue = fcategoryName.options[0].value;
        //console.log(selectValue);//1
        fcategoryName.addEventListener("change", function () {
            var selectValue = this.options[this.selectedIndex].value;

            console.log(selectValue);
            //fcategoryID.setAttribute('value', selectValue);
            fcategoryID.value = selectValue;

        });



        //預覽
        const theFile = document.querySelector('#fileid');
        const theImg = document.querySelector('#img1')
        theFile.addEventListener("change", function () {
            //預覽圖片 FileReader .png、.jpeg..
            //regular expression
            const file = theFile.files[0]
            //todo 判斷檔案是不是圖，可以用regular expression

            const reader = new FileReader();
            reader.addEventListener("load", function () {
                theImg.src = this.result;
            })
            reader.readAsDataURL(file);
        })

    </script>
}
